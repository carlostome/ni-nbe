import Relation.Binary as RB
open import Level

module Example (Pre : RB.Preorder 0‚Ñì 0‚Ñì 0‚Ñì) where

  open import NBELMon (Pre)
  open import Data.Empty
  open import Relation.Nullary
  open import Relation.Binary.PropositionalEquality
  open import Data.Sum

  Bool : Type
  Bool = ùüô + ùüô

  True : ‚àÄ {Œì} ‚Üí Nf Bool Œì
  True = inl unit

  False : ‚àÄ {Œì} ‚Üí Nf Bool Œì
  False = inr unit

  -- general lemma about normal forms of programs from secret
  -- inputs to public booleans that does not assume anything
  -- but the preorder on the monad labels
  nf-lemma‚ÇÅ : ‚àÄ {a} {‚Ñì·¥∏ ‚Ñì·¥¥}
            ‚Üí ¬¨ (‚Ñì·¥¥ ‚äë ‚Ñì·¥∏)
            ‚Üí (n : Nf (‚ü® ‚Ñì·¥¥ ‚ü© a ‚áí ‚ü® ‚Ñì·¥∏ ‚ü© Bool) √ò)
            ‚Üí (n ‚â° `Œª (Œ∑ True)) ‚äé (n ‚â° `Œª (Œ∑ False))
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (`Œª (Œ∑ (inl unit))) = inj‚ÇÅ refl
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (`Œª (Œ∑ (inl (case x n n‚ÇÅ))))
    with neutrality x
  ... | here ()
  ... | there ()
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (`Œª (Œ∑ (inr unit))) = inj‚ÇÇ refl
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (`Œª (Œ∑ (inr (case x n n‚ÇÅ))))
    with neutrality x
  ... | here ()
  ... | there ()
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (`Œª (Œ∑ (case x k‚ÇÅ k‚ÇÇ)))
    with neutrality x
  ... | here ()
  ... | there ()
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (`Œª (c ‚Üë m ‚â´= k))
    with neutrality m
  ... | here refl = ‚ä•-elim (‚Ñì·¥¥‚ã¢‚Ñì·¥∏ c)
  ... | there ()
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (`Œª (case x k‚ÇÅ k‚ÇÇ))
    with neutrality x
  ... | here ()
  ... | there ()
  nf-lemma‚ÇÅ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ (case x _ _)
    with neutrality x
  ... | ()
  
  -- An equivalent of nf-lemma‚ÇÅ.
  -- I chose a different (but equivalent) type for the normal form
  -- since it readily yields the result on using `Nf-Sec`.
  
  nf-lemma‚ÇÅ' : ‚àÄ {a} {‚Ñì·¥∏ ‚Ñì·¥¥}
            ‚Üí ¬¨ (‚Ñì·¥¥ ‚äë ‚Ñì·¥∏)
            ‚Üí (n : Nf (‚ü® ‚Ñì·¥∏ ‚ü© Bool) (√ò `, (‚ü® ‚Ñì·¥¥ ‚ü© a)))
            ‚Üí IsConstNf n
  nf-lemma‚ÇÅ' ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ n
    with Nf-NI
           (√ò `, (‚ü®‚ü© ‚äë-refl))  -- (√ò `, ‚ü® ‚Ñì·¥¥ ‚ü© a) is atleast H-sensitive
           (‚ü® ùüô + ùüô ‚ü© _)       -- `‚ü® ‚Ñì·¥∏ ‚ü© Bool` is ground
           (‚ü® ùüô + ùüô ‚ü© ‚äë-refl)  -- `‚ü® ‚Ñì·¥∏ ‚ü© Bool` is transparent at ‚Ñì·¥∏
           n
  ... | inj‚ÇÅ nIsConst = nIsConst
  ... | inj‚ÇÇ ‚Ñì·¥¥‚äë‚Ñì·¥∏    = ‚ä•-elim (‚Ñì·¥¥‚ã¢‚Ñì·¥∏ ‚Ñì·¥¥‚äë‚Ñì·¥∏)

  -- A more general version of nf-lemma‚ÇÅ'
  -- (insantiating `b` with `Bool` gives nf-lemma‚ÇÅ')
  
  nf-lemma‚ÇÇ :  ‚àÄ {a} {b} {‚Ñì·¥∏ ‚Ñì·¥¥}
            ‚Üí ¬¨ (‚Ñì·¥¥ ‚äë ‚Ñì·¥∏)
            ‚Üí Ground b
            ‚Üí Tr b ‚Ñì·¥∏
            ‚Üí (n : Nf (‚ü® ‚Ñì·¥∏ ‚ü© b) (√ò `, (‚ü® ‚Ñì·¥¥ ‚ü© a)))
            ‚Üí IsConstNf n
  nf-lemma‚ÇÇ ‚Ñì·¥¥‚ã¢‚Ñì·¥∏ g t n with Nf-NI
           (√ò `, (‚ü®‚ü© ‚äë-refl))  -- (√ò `, ‚ü® ‚Ñì·¥¥ ‚ü© a) is atleast H-sensitive
           (‚ü® g ‚ü© _)           -- `‚ü® ‚Ñì·¥∏ ‚ü© b` is ground (since b is)
           (‚ü® t ‚ü© ‚äë-refl)      -- `‚ü® ‚Ñì·¥∏ ‚ü© b` is transparent at ‚Ñì·¥∏ (since b is)
           n
  ... | inj‚ÇÅ nIsConst = nIsConst
  ... | inj‚ÇÇ ‚Ñì·¥¥‚äë‚Ñì·¥∏ = ‚ä•-elim (‚Ñì·¥¥‚ã¢‚Ñì·¥∏ ‚Ñì·¥¥‚äë‚Ñì·¥∏)

  -- NOTE: Using nf-lemma‚ÇÇ, we should be able to prove NI for
  -- `Nf (‚ü® ‚Ñì·¥∏ ‚ü© b √ó ‚ü® ‚Ñì·¥¥ ‚ü© b)  (√ò `, ‚ü® ‚Ñì·¥∏ ‚ü© a `, ‚ü® ‚Ñì·¥¥ ‚ü© a)`
  -- TBD after we add products
